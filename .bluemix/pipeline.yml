---
stages:
- name: Init
  inputs:
  - service: ${GIT_REPO}
    type: git
    branch: '{{form.pipeline.parameters.INPUT_GIT_BRANCH}}'
    dir_name: null
  triggers:
  - type: commit
  permission:
    execute: TOOLCHAIN_ADMINS
  jobs:
  - name: Build
    type: builder
    artifact_dir: ''
    build_type: customimage
    script: |-
      #********************************************
      #!/bin/bash
      set -x
      set -e
      ibm-bifrost init diff
    namespace: 'NULL'
    docker_image: ${DOCKER_IMAGE_NAME}
- name: Quality
  inputs:
  - type: job
    stage: Init
    job: build
    dir_name: null
  triggers:
  - type: stage
  permission:
    execute: TOOLCHAIN_ADMINS
  jobs:
  - name: 'Test Quality'
    type: builder
    artifact_dir: ''
    build_type: customimage
    script: |-
      #********************************************
      #!/bin/bash
      set -x
      set -e
      ibm-bifrost quality
    docker_image: ${DOCKER_IMAGE_NAME}
- name: Security
  inputs:
  - type: job
    stage: Init
    job: build
    dir_name: null
  triggers:
  - type: stage
  permission:
    execute: TOOLCHAIN_ADMINS
  jobs:
  - name: 'Sonar Check'
    type: builder
    artifact_dir: ''
    build_type: customimage
    script: |-
      #********************************************
      #!/bin/bash
      ibm-bifrost sonar
    namespace: 'NULL'
    docker_image: ${DOCKER_IMAGE_NAME}
- name: PublishJar
  inputs:
  - type: job
    stage: Init
    job: build
    dir_name: null
  triggers:
  - type: stage
  permission:
    execute: TOOLCHAIN_ADMINS
  jobs:
  - name: Jar
    type: builder
    artifact_dir: ''
    build_type: customimage
    script: |-
      #********************************************
      #!/bin/bash
      set -x
      set -e
      sonar-scanner --version
      ibm-bifrost publish
    namespace: 'NULL'
    docker_image: ${DOCKER_IMAGE_NAME}
- name: DockerImage
  inputs:
  - type: job
    stage: Init
    job: build
    dir_name: null
  triggers:
  - type: stage
  permission:
    execute: TOOLCHAIN_ADMINS
  jobs:
  - name: 'Image'
    type: deployer
    artifact_dir: ''
    deploy_type: customimage
    script: |-
      #********************************************
      #!/bin/bash
      ibm-bifrost build
    namespace: 'NULL'
    docker_image: ${DOCKER_IMAGE_NAME}

hooks:
- enabled: true
  label: null
  ssl_enabled: false
  url: http://lms-api/v1/messaging/webhook/publish

properties:
- name: DOCKER_IMAGE_NAME
  value: '{{form.pipeline.parameters.dockerImageName}}'
  type: text
- name: DOCKER_USERNAME
  value: '{{form.pipeline.parameters.dockerUsername}}'
  type: text
- name: DOCKER_PASSWORD
  value: '{{form.pipeline.parameters.api-key}}'
  type: secure
- name: FUNC_USER
  value: '{{form.pipeline.parameters.FuncUser}}'
  type: secure
- name: FUNC_PASS
  value: '{{form.pipeline.parameters.FuncPass}}'
  type: secure
- name: AF_PSW
  value: '{{form.pipeline.parameters.AfPsw}}'
  type: secure
- name: SONAR_DEVOP_TOKEN
  value: '{{form.pipeline.parameters.SonarDevopToken}}'
  type: secure
- name: INPUT_GIT_BRANCH
  value: '{{form.pipeline.parameters.INPUT_GIT_BRANCH}}'
  type: text
- name: GIT_REPO
  value: 'https://github.ibm.com/CEDP-Garage/cedp-toolchain.git'
  type: text