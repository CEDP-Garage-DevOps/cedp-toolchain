apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: versions-task
spec:
  params:
    - name: DESTINATION
    - name: DOCKER_IMAGE_NAME
    - name: REGISTRY_REGION_ID
    - name: INPUT_GIT_BRANCH 
    - name: GIT_REPO 
    - name: VERSIONS_GIT_BRANCH 
    - name: IBMCLOUD_HOME 
  workspaces:
  - name: task-pvc
    mountPath: /artifacts   
  steps:
    - name: get-versions
      securityContext:
        privileged: true    
      image:  $(params.DOCKER_IMAGE_NAME)
      command: ["/bin/sh", "-c"]
      args:
        - set -e &&
          set -x &&
          cd /artifacts && 
          ibm-bifrost versions --pull $VERSIONS_GIT_BRANCH &&
          mv .git git
      env:
        - name: DESTINATION
          value: $(params.DESTINATION)
        - name: REGISTRY_REGION_ID
          value: $(params.REGISTRY_REGION_ID)
        - name: INPUT_GIT_BRANCH 
          value: $(params.INPUT_GIT_BRANCH)
        - name: GIT_REPO 
          value: $(params.GIT_REPO)
        - name: VERSIONS_GIT_BRANCH 
          value: $(params.VERSIONS_GIT_BRANCH)
        - name: IBMCLOUD_HOME 
          value: $(params.IBMCLOUD_HOME)
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: plan-task
spec:
  params:
    - name: DESTINATION
    - name: DOCKER_IMAGE_NAME
    - name: REGISTRY_REGION_ID
    - name: IBM_CLOUD_API_KEY
    - name: KEY_PROTECT_NAME
    - name: CLUSTER
    - name: DOMAIN
    - name: EXTERNAL_IP
    - name: DESTINATION
    - name: VERDACCIO_URL
    - name: VERDACCIO_USER 
    - name: VERDACCIO_PASSWORD 
    - name: ARTIFACTORY_USER
    - name: ARTIFACTORY_APIKEY 
    - name: ARTIFACTORY_URL     
  workspaces:
  - name: task-pvc
    mountPath: /artifacts   
  steps:
    - name: plan
      securityContext:
        privileged: true    
      image: $(params.DOCKER_IMAGE_NAME)
      command: ["/bin/sh", "-c"]
      args:
        - set -e &&
          set -x &&
          cd /artifacts && 
          export REGION=$(echo $REGISTRY_REGION_ID | cut -f3 -d:) &&
          ibm-bifrost login --public-cloud &&
          mv git .git &&
          ibm-bifrost plan -d "${DESTINATION}" diff --commit &&
          mv .git git
      env:
        - name: DESTINATION
          value: $(params.DESTINATION)
        - name: REGISTRY_REGION_ID
          value: $(params.REGISTRY_REGION_ID)
        - name: IBM_CLOUD_API_KEY
          valueFrom:
            secretKeyRef: 
              name: secure-properties
              key: IBM_CLOUD_API_KEY
        - name: KEY_PROTECT_NAME 
          value: $(params.KEY_PROTECT_NAME)
        - name: CLUSTER
          value: $(params.CLUSTER)
        - name: DOMAIN
          value: $(params.DOMAIN)
        - name: EXTERNAL_IP
          value: $(params.EXTERNAL_IP)
        - name: DESTINATION
          value: $(params.DESTINATION)
        - name: VERDACCIO_URL
          value: $(params.VERDACCIO_URL)
        - name: VERDACCIO_USER 
          value: $(params.VERDACCIO_USER)
        - name: VERDACCIO_PASSWORD 
          value: $(params.VERDACCIO_PASSWORD)
        - name: ARTIFACTORY_USER
          value: $(params.ARTIFACTORY_USER)
        - name: ARTIFACTORY_APIKEY 
          value: $(params.ARTIFACTORY_APIKEY)
        - name: ARTIFACTORY_URL 
          value: $(params.ARTIFACTORY_URL)            
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: code-task
spec:
  params:
    - name: REGISTRY_REGION_ID
    - name: IBM_CLOUD_API_KEY
    - name: DOCKER_IMAGE_NAME 
    - name: DASHBOARD_URL
  workspaces:
    - name: task-pvc
      mountPath: /artifacts   
  steps:
    - name: code
      securityContext:
        privileged: true    
      image: $(params.DOCKER_IMAGE_NAME)
      command: ["/bin/sh", "-c"]
      args:
        - set -e &&
          set -x &&
          cd /artifacts && 
          export REGION=$(echo $REGISTRY_REGION_ID | cut -f3 -d:) &&
          export TOOLCHAIN_ID=$(echo $DASHBOARD_URL | cut -d= -f2) &&
          export MAVEN_OPTS="-Xmx1000m" &&      
          ibm-bifrost login --public-cloud &&
          ibm-bifrost code --build 
      env:
        - name: REGISTRY_REGION_ID
          value: $(params.REGISTRY_REGION_ID)
        - name: IBM_CLOUD_API_KEY
          valueFrom:
            secretKeyRef: 
              name: secure-properties
              key: IBM_CLOUD_API_KEY
        - name: DASHBOARD_URL  
          value: $(params.DASHBOARD_URL)                 
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: docker-task
spec:
  params:
    - name: REGISTRY_REGION_ID
    - name: IBM_CLOUD_API_KEY
    - name: IBMCLOUD_HOME
    - name: DOCKER_IMAGE_NAME
    - name: DASHBOARD_URL  
  workspaces:
    - name: task-pvc
      mountPath: /artifacts
  resources:
    outputs:
      - name: built-image
        type: image
        description: "(Optional) The image to build"
        optional: true              
  steps:
    - name: build
      securityContext:
        privileged: true    
      image: $(params.DOCKER_IMAGE_NAME)
      command: ["/bin/sh", "-c"]
      args:
        - |
          set -e 
          set -x 
          cd /artifacts && 
          export REGION=$(echo $REGISTRY_REGION_ID | cut -f3 -d:) 
          export TOOLCHAIN_ID=$(echo $DASHBOARD_URL | cut -d= -f2) 
          ibm-bifrost login --public-cloud 
          ibm-bifrost login --public-registry 
          ibm-bifrost docker --build 
      env:
        - name: REGISTRY_REGION_ID
          value: $(params.REGISTRY_REGION_ID)
        - name: IBM_CLOUD_API_KEY
          valueFrom:
            secretKeyRef: 
              name: secure-properties
              key: IBM_CLOUD_API_KEY
        - name: IBMCLOUD_HOME
          value: $(params.IBMCLOUD_HOME)
        - name: DASHBOARD_URL  
          value: $(params.DASHBOARD_URL)
        - name: DOCKER_HOST
          value: "tcp://localhost:2376"
        # Verify TLS.
        - name: DOCKER_TLS_VERIFY
          value: "1"
        # Use the certs generated by the sidecar daemon.
        - name: DOCKER_CERT_PATH
          value: /certs/client
        # The location of the client configuration files.
        - name: DOCKER_CONFIG
          value: /steps
      volumeMounts:
        - mountPath: /certs/client
          name: dind-certs                            
    - name: validate
      securityContext:
        privileged: true    
      image: $(params.DOCKER_IMAGE_NAME)
      command: ["/bin/sh", "-c"]
      args:
        - set -e &&
          set -x &&
          cd /artifacts && 
          export REGION=$(echo $REGISTRY_REGION_ID | cut -f3 -d:) &&
          export TOOLCHAIN_ID=$(echo $DASHBOARD_URL | cut -d= -f2) &&
          ibm-bifrost login --public-cloud &&
          ibm-bifrost login --public-registry &&
          ibm-bifrost docker --validate 
      env:
        - name: REGISTRY_REGION_ID
          value: $(params.REGISTRY_REGION_ID)
        - name: IBM_CLOUD_API_KEY
          valueFrom:
            secretKeyRef: 
              name: secure-properties
              key: IBM_CLOUD_API_KEY
        - name: IBMCLOUD_HOME
          value: $(params.IBMCLOUD_HOME)
        - name: DASHBOARD_URL  
          value: $(params.DASHBOARD_URL)  
  sidecars:
    - image: icr.io/continuous-delivery/pipeline/docker:19.03.15-dind
      name: server
      securityContext:
        privileged: true
      command: ["sh", "-c"]
      env:
        # Write generated certs to the path shared with the client.
        - name: DOCKER_TLS_CERTDIR
          value: /certs
      args:
        # Set the MTU to a value that is containable in the ibmcloud calico mtu value
        # References:
        # - https://liejuntao001.medium.com/fix-docker-in-docker-network-issue-in-kubernetes-cc18c229d9e5
        # - https://cloud.ibm.com/docs/containers?topic=containers-kernel#calico-mtu
        #
        # Use a workaround to by pass virtio-fs for Continuous Delivery shared workers
        - if [[ $(df -PT /var/lib/docker | awk 'NR==2 {print $2}') == virtiofs ]]; then
            apk add e2fsprogs &&
            truncate -s 20G /tmp/disk.img &&
            mkfs.ext4 /tmp/disk.img &&
            mount /tmp/disk.img /var/lib/docker; fi &&
          dockerd-entrypoint.sh --mtu=1400 --storage-driver=overlay2;
      volumeMounts:
        - mountPath: /certs/client
          name: dind-certs
        - name: docker-graph-storage 
          mountPath: /var/lib/docker 
      # Wait for the dind daemon to generate the certs it will share with the client.
      readinessProbe:
        initialDelaySeconds: 2
        periodSeconds: 1
        exec:
          command: ["ls", "/certs/client/ca.pem"]                            
  volumes:
    - name: dind-certs
      emptyDir: {}
    - name: docker-graph-storage 
      emptyDir: {}                           
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-task
spec:
  params:
    - name: REGISTRY_REGION_ID
    - name: IBM_CLOUD_API_KEY
    - name: IBMCLOUD_HOME
    - name: DEPLOYMENT_TYPE
    - name: CLUSTER 
    - name: DOCKER_IMAGE_NAME  
    - name: DASHBOARD_URL
  workspaces:
    - name: task-pvc
      mountPath: /artifacts   
  steps:
    - name: deploy
      securityContext:
        privileged: true    
      image: $(params.DOCKER_IMAGE_NAME)
      command: ["/bin/sh", "-c"]
      args:
        - set -e &&
          set -x &&
          cd /artifacts && 
          export REGION=$(echo $REGISTRY_REGION_ID | cut -f3 -d:) &&
          export TOOLCHAIN_ID=$(echo $DASHBOARD_URL | cut -d= -f2) && 
          ibm-bifrost login --public-cloud &&
          ibm-bifrost login --${DEPLOYMENT_TYPE} &&
          ibm-bifrost deploy --run 
      env:
        - name: REGISTRY_REGION_ID
          value: $(params.REGISTRY_REGION_ID)
        - name: IBM_CLOUD_API_KEY
          valueFrom:
            secretKeyRef: 
              name: secure-properties
              key: IBM_CLOUD_API_KEY
        - name: IBMCLOUD_HOME
          value: $(params.IBMCLOUD_HOME)
        - name: DEPLOYMENT_TYPE
          value: $(params.DEPLOYMENT_TYPE)
        - name: CLUSTER
          value: $(params.CLUSTER)
        - name: DASHBOARD_URL  
          value: $(params.DASHBOARD_URL)                     
    - name: validate
      securityContext:
        privileged: true    
      image: $(params.DOCKER_IMAGE_NAME)
      command: ["/bin/sh", "-c"]
      args:
        - set -e &&
          set -x &&
          cd /artifacts && 
          export REGION=$(echo $REGISTRY_REGION_ID | cut -f3 -d:) &&
          export TOOLCHAIN_ID=$(echo $DASHBOARD_URL | cut -d= -f2) &&
          ibm-bifrost login --public-cloud &&
          ibm-bifrost login --${DEPLOYMENT_TYPE} &&
          ibm-bifrost deploy --validate 
      env:
        - name: REGISTRY_REGION_ID
          value: $(params.REGISTRY_REGION_ID)
        - name: IBM_CLOUD_API_KEY
          valueFrom:
            secretKeyRef: 
              name: secure-properties
              key: IBM_CLOUD_API_KEY
        - name: IBMCLOUD_HOME
          value: $(params.IBMCLOUD_HOME)
        - name: DEPLOYMENT_TYPE
          value: $(params.DEPLOYMENT_TYPE)
        - name: CLUSTER
          value: $(params.CLUSTER)
        - name: DASHBOARD_URL  
          value: $(params.DASHBOARD_URL)                 
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: versions-push-task
spec:
  params:
    - name: DESTINATION
    - name: DOCKER_IMAGE_NAME
    - name: REGISTRY_REGION_ID
    - name: INPUT_GIT_BRANCH 
    - name: GIT_REPO 
    - name: VERSIONS_GIT_BRANCH 
    - name: IBMCLOUD_HOME 
    - name: DOCKER_IMAGE_NAME
  workspaces:
  - name: task-pvc
    mountPath: /artifacts   
  steps:
    - name: push-versions
      securityContext:
        privileged: true    
      image: $(params.DOCKER_IMAGE_NAME)
      command: ["/bin/sh", "-c"]
      args:
        - set -e &&
          set -x &&
          cd /artifacts && 
          pwd &&
          mv git .git &&
          git config --global user.email "toolchain@cloud.ibm.com" &&
          git config --global user.name "IBM Cloud DevOps Toochain" &&
          ibm-bifrost versions --push ${VERSIONS_GIT_BRANCH}
      env:
        - name: DESTINATION
          value: $(params.DESTINATION)
        - name: REGISTRY_REGION_ID
          value: $(params.REGISTRY_REGION_ID)
        - name: INPUT_GIT_BRANCH 
          value: $(params.INPUT_GIT_BRANCH)
        - name: GIT_REPO 
          value: $(params.GIT_REPO)
        - name: VERSIONS_GIT_BRANCH 
          value: $(params.VERSIONS_GIT_BRANCH)
        - name: IBMCLOUD_HOME 
          value: $(params.IBMCLOUD_HOME)
